#!/usr/bin/env python

from sys import argv, stderr, stdout
from collections import Counter
from copy import deepcopy
from getopt import gnu_getopt, GetoptError
import pysam as ps
import numpy as np

# global paramaters I do not expect to be changed for now
UMITHRESHOLD = 9
COVERAGETHRESHOLD = 4
AGREEMENTTHRESHOLD = 0.9
AVERAGEREADLENGTH = 114
CONSENSUSNTHRESHOLD = 0.1

"""
Assumptions: 
1. Most read pairs should overlap.
2. The reads are 114 bps in length.
"""

def ignore_alignment(aln, start, end):
    """Should I ignore this alignment?"""
    global AVERAGEREADLENGTH
    if aln.is_unmapped: return True
    if aln.mate_is_unmapped: return True
    if aln.is_secondary: return True
    if aln.next_reference_id != aln.reference_id: return True
    if aln.next_reference_start > end: return True
    if (aln.next_reference_start + AVERAGEREADLENGTH) < start: return True
    return False

class Consensus:
    """Consensus object that result from alignments of the same read family."""
    def __init__(self, start, end):
        self.profile = {}

    def print_profile(self):
        positions = self.profile.keys()
        s = min(positions)
        e = max(positions)
        for p in range(s,e+1):
            if p in self.profile:
                profile = self.profile[p]
                print p, profile
            else:
                print p

    # add a new alignment to the profile
    def add_alignment(self, aln):
        qseq = aln.query_sequence
        qndx = 0
        rndx = aln.pos
        for op, oplen in aln.cigartuples:
            if op == 0 or op == 7 or op == 8:
                # match / mismatch
                for i in range(0, oplen):
                    if rndx not in self.profile: self.profile[rndx] = Counter()
                    self.profile[rndx][qseq[qndx]] += 1
                    qndx += 1
                    rndx += 1
            elif op == 1:
                # insertion
                assert rndx-1 in self.profile
                self.profile[rndx-1][qseq[qndx-1]] -= 1
                self.profile[rndx-1][qseq[qndx-1:qndx+oplen]] += 1
                qndx += oplen
            elif op == 2:
                # deletion
                for i in range(0, oplen):
                    if rndx not in self.profile: self.profile[rndx] = Counter()
                    self.profile[rndx]['*'] += 1
                    rndx += 1
            elif op == 3 or op == 9:
                assert False
            elif op == 4:
                qndx += oplen
            elif op == 5 or op == 6:
                assert False
            else:
                assert False

    def __str__(self):
        global COVERAGETHRESHOLD, AGREEMENTTHRESHOLD

        positions = self.profile.keys()
        s = min(positions)
        e = max(positions)

        sequence = []
        for p in range(s,e+1):
            if p in self.profile:
                profile = self.profile[p]
                covering = sum(profile.values())
                agreeing = max(profile.values())
                if covering > COVERAGETHRESHOLD and \
                  (agreeing*1./covering) > AGREEMENTTHRESHOLD:
                    b = profile.most_common(1)[0]
                    if b[0] != '*':
                        sequence.append(b[0])
            else:
                sequence.append('N')

        return "".join(sequence)

def main(outfile, threads, intervalname, bamname):
    global COVERAGETHRESHOLD, CONSENSUSNTHRESHOLD

    # read in all the intervals
    intervals = []
    with open(intervalname, 'r') as f:
        for line in f:
            chrom, start, end = line.strip().split()
            start = int(start)
            end = int(end)
            intervals.append((chrom, start, end))

    bamfile = ps.AlignmentFile(bamname, 'r')

    for chrom, start, end in intervals:
        region = "%s:%d-%d" % (chrom, start, end)
        #print >> stderr, "Working on region: %s" % region

        umi_families = Counter()
        num_reads = 0
        reference_id = None
        for aln in bamfile.fetch(region=region):
            # require that both pairs from this fragment align to this region
            if ignore_alignment(aln, start, end): continue

            umi = aln.query_name.split(":")[-1]
            umi_families[umi] += 1      
            num_reads += 1
            if reference_id is None: reference_id = aln.reference_id
    
        #print >> stderr, "Number of reads in this region: %d" % num_reads
        #print >> stderr, "Number of UMI families: %d" % len(umi_families)
        #print >> stderr, "Number of UMI families with more than %d members: %d" % (UMIThreshold, len([x for x,y in umi_families.items() if y > UMIThreshold]))
    
        family_counter = deepcopy(umi_families)
        consensus = {}
        num_aligned = 0
        num_overlapping = 0
        num_checked = 0
        for aln in bamfile.fetch(region=region):
            # require that both pairs from this fragment align to this region
            if ignore_alignment(aln, start, end): continue

            # lets get some statistics on our assumption
            if (aln.next_reference_start > aln.reference_start):
                num_checked += 1
                if (aln.aend >= aln.next_reference_start):
                    num_overlapping += 1 

            umi = aln.query_name.split(":")[-1]
            if umi_families[umi] > COVERAGETHRESHOLD:
                if umi not in consensus:
                    consensus[umi] = Consensus(start, end)
                consensus[umi].add_alignment(aln)
                family_counter[umi] -= 1
                if family_counter[umi] == 0:
                    seq = str(consensus[umi])
                    counts = Counter(seq)
                    if 'N' not in counts or \
                    (counts['N']*1./sum(counts.values())) < CONSENSUSNTHRESHOLD:
                        print >> outfile, ">%s" % umi
                        print >> outfile, seq
                    for k,v in consensus[umi].profile.items():
                        del[v]
                    del(consensus[umi])
                num_aligned += 1
                #if num_aligned % 20000 == 0:
                #    print >> stderr, "Included %d reads" % (num_aligned)
        #if num_checked > 0:
        #    print >> stderr, "Fraction of overlapping pairs: %2.2f" % (num_overlapping*1./num_checked)

        del consensus        
        del umi_families 
        del family_counter

def print_help():
    print >> stderr, "get_consensus_reads [-o output.txt] [-t threads] target.bed alignments.bam"

if __name__ == "__main__":
    try:
        opts, args = gnu_getopt(argv, "o:t:h", ["output=", "threads=", "help"])
    except GetoptError:
        print_help()
        exit(2)

    outfile = stdout
    threads = 1

    for opt, arg in opts:
        if opt in ["-h", "--help"]:
            print_help()
            exit()
        elif opt in ["-o", "--output"]:
            outfile = open(arg, 'w')
        elif opt in ["-t", "--threads"]:
            threads = int(arg)
     
    if len(args) != 3:
        print_help()
        exit(2)

    main(outfile, threads, args[1], args[2])
    if outfile != stdout: outfile.close()

